<?php

/**
 * @file
 * Module to accept billing information and process transactions with Stripe Payments.
 */
/**
 * Implements hook_help().
 */
function ebookstripe_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#ebookstripe':
            return t('<h2>Congradulations on installing the EbookStripe module.</h2><p>This is an e-commerce module for processing payment using stripe.com for ebook-like content on your Drupal 7 site, if you do not feel like using an entire store like Ubercart or Commerce. <a href="/admin/config/services/ebookstripe/readme">For more information, the readme page</a></p>');
        case 'admin/settings/ebookstripe':
            return t('<h2>Congradulations on installing the EbookStripe module.</h2><p>This is an e-commerce module for processing payment using stripe.com for ebook-like content on your Drupal 7 site, if you do not feel like using an entire store like Ubercart or Commerce. <a href="/admin/config/services/ebookstripe/readme">For more information, the readme page</a></p>');
    }
}

/**
 * Implements hook_init() to run on every page.
 */
function ebookstripe_init()
{

    // if you want (set up from the admin page for this module), display an insecure message as a warning to site admins if the site is under http
    if (arg(0) == 'admin' && arg(1) == 'config' && arg(2) == 'services' && arg(3) == 'ebookstripe') {
        $testvariable = variable_get('ebookstripe_sslmessage');
        if ($testvariable > 0) {
            global $base_root;
            if (!stristr($base_root, "https")) {
                drupal_set_message("Your server is using an insecure connection - http - to serve credit card information to the payment processor. ", "error");
            }
        }
    }
    
    if (module_exists("ebookbraintree")) {
        drupal_set_message("You should not be using the ebookbraintree module at the same time as this one, as they perform the same function.", "error");
        drupal_set_message("Please disable one or the other.", "error");
    }
    
    // you can add the readingonthebeachhelper helper module to your site for some visual help
    if (module_exists("readingonthebeachhelper")) {
        drupal_add_css(drupal_get_path('module', 'readingonthebeachhelper') . '/base.css', array(
            'scope' => 'header'
        ));
        
        if (arg(0) == 'startreading') {
            drupal_add_js(drupal_get_path('module', 'readingonthebeachhelper') . '/startreading.js', array(
                'scope' => 'footer'
            ));
        }
        
        if (!is_numeric(arg(0)) && arg(2) == 'chapter' && is_numeric(arg(3))) {
            drupal_add_js(drupal_get_path('module', 'readingonthebeachhelper') . '/chapter.js', array(
                'scope' => 'footer'
            ));
        }
    }
    
    
}

/**
 * Implements hook_menu().
 */
function ebookstripe_menu()
{
    $items = array();
    
    $items['admin/config/services/ebookstripe/reports'] = array(
        'title' => 'EbookStripe Sales Reports',
        'description' => 'Who has bought your chapters of your book through Stripe Payments',
        'page callback' => 'ebookstripe_reports_view',
        'access arguments' => array(
            'access content'
        ),
        'weight' => 2,
        'type' => MENU_NORMAL_ITEM
    );
    
    $items['admin/config/services/ebookstripe/create'] = array(
        'title' => 'Create an online e-book',
        'description' => 'Create an online e-book',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'ebookstripe_creator_form'
        ),
        'file' => 'ebookstripe.creator.inc',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM
    );
    
    $items['admin/config/services/ebookstripe/readme'] = array(
        'title' => 'EbookStripe set up instructions',
        'description' => 'Read Me file',
        'page callback' => 'ebookstripe_readme_view',
        'access arguments' => array(
            'access content'
        ),
        'weight' => 3,
        'type' => MENU_CALLBACK
    );
    
    $items['admin/config/services/ebookstripe'] = array(
        'title' => 'EbookStripe',
        'page callback' => 'drupal_get_form',
        'access callback' => 'user_access',
        'access arguments' => array(
            'administer ebookstripe'
        ),
        'page arguments' => array(
            'ebookstripe_admin_settings',
            NULL
        ),
        'type' => MENU_CALLBACK,
        'file' => 'ebookstripe.admin.inc',
        'description' => 'Configure Stripe keys provided by Stripe.com when you register there.'
    );
    
    $items['book/%/chapter/buynow/%'] = array(
        'title' => 'Buy Now',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            4
        ),
        'page arguments' => array(
            'ebookstripe_create_form'
        ),
        'access callback' => TRUE
    );
    
    $items['book/%/chapter/%'] = array(
        'title' => 'My Page',
        'page callback' => 'ebookstripe_load_chapter',
        'page arguments' => array(
            1,
            3
        ),
        'type' => MENU_CALLBACK,
        'access callback' => TRUE
    );
    
    $items['delete/%'] = array(
        'title' => 'Delete this',
        'page callback' => 'ebookstripe_delete_chapter',
        'page arguments' => array(
            1
        ),
        'type' => MENU_CALLBACK,
        'access callback' => TRUE
    );
    
    $items['startover'] = array(
        'title' => 'Delete current book and start over?',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'ebookstripe_start_over'
        ),
        'access callback' => TRUE
    );
    
    $items['startreading'] = array(
        'title' => 'Start Reading...',
        'page callback' => 'ebookstripe_startreading',
        'type' => MENU_NORMAL_ITEM,
        'access callback' => TRUE
    );
    
    return $items;
}

/**
 * The callback function to let the admin view the customers of the site even if they don't have the Views module installed.  This module has little dependency on other modules.
 */
function ebookstripe_reports_view()
{
    $header = array(
        // The header gives the table the information it needs in order to make
        // the query calls for ordering. TableSort uses the field information
        // to know what database column to sort by.
        array(
            'data' => t('ID'),
            'field' => 'n.thid'
        ),
        array(
            'data' => t('Name'),
            'field' => 'n.contactname'
        ),
        array(
            'data' => t('Email'),
            'field' => 'n.contactemail'
        ),
        array(
            'data' => t('Date'),
            'field' => 'n.timestamp'
        ),
        array(
            'data' => t('Book Type'),
            'field' => 'n.booktype'
        )
    );
    
    $query = db_select('ebookstripe_customers', 'n')->extend('TableSort')->extend('PagerDefault');
    $query->fields('n');
    
    $result   = $query->orderByHeader($header)->limit(10)->execute();
    $num_rows = $query->countQuery()->execute()->fetchField();
    if ($num_rows < 1) {
        $output = "No books sold yet.";
    } else {
        $rows = array();
        foreach ($result as $row) {
            $rows[] = array(
                $row->thid,
                $row->contactname,
                $row->contactemail,
                format_interval(REQUEST_TIME - $row->timestamp) . ' ' . t('ago'),
                $row->booktype
            );
        }
        
        // build the table for the nice output.
        $output['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows
        );
    }
    return $output;
}



/**
 * The online read me file with instructions for the admin linked from the configuration page of this module
 */
function ebookstripe_readme_view()
{
    // Format output.
    $build = array(
        'render_array_paragraph' => array(
            '#type' => 'markup',
            '#markup' => '<h2>Congradulations on installing the EbookStripe module.</h2><p>This is an e-commerce module for processing payment using Stripe Payments for single digital items in your Drupal 7 site, if you do not feel like using an entire store like Ubercart or Commerce.'
        ),
        'why_render_arrays' => array(
            '#items' => array(
                '- This is made to be simple to set up and sell, but nothing is plug-and-play',
                '- For larger volume of selling, please use Drupal Commerce or Ubercart',
                '- This does not work with other payment gateways such as Paypal or Authorize.net',
                '- This does not \"plugin\" to or rely on other Drupal systems such as Views, Rules, etc...',
                '- The goal is just a simple, quick loading solution',
                '- This requires Javascript to be enabled at all times to function',
                '- Stripe payment processor and this module do not interact with your Drupal site in regards to credit card information',
                '',
                'Installing',
                '1) Install the module Node View Permissions in /sites/all/modules like all other modules',
                '2) Install and enable this module in /sites/all/modules like all other modules',
                '3) the module will auto-install content types, product fields, a checkout page and a sales report page for you.',
                '',
                'Configuring',
                '- Set up your banking information and get approved at Stripe.com - this will take a day or week',
                '- Open the webpage admin/config/services/ebookstripe and enter your Stripe account details and options',
                '- Stripe will give you a test key pair to test with, so enter these in, DO NOT check the live? box, and click save',
                '- When site users view a node of that type, they can immediately click the checkout button to purchase it on site with their credit card.',
                '- Open the webpage admin/config/services/ebookstripe/create , click through the options and create the outline of your ebook!',
                '- Write or copy and paste your book content into the chapters/sections and save each one',
                '- Upload some images like a cover or illustrations if you want',
                '- Design/theme your site/book if you want',
                '- Open the webpage admin/config/content/node-view-permissions and select the sections you want to charge for and click save',
                '- Open the webpage admin/people/permissions/roles and make sure each role can see that chapter for that ebook with permissions',
                '- For example, when someone buys chapter 1 of ebook named \"My Cool Book\" , they receive role my_cool_book_chapter1',
                '- So, for role role my_cool_book_chapter1, set the permission of that to ebookstripe_chapter1end: View own content and click save',
                '',
                'Testing',
                '- Open the webpage startreading and select a book and then a chapter from that book',
                '- There will be a button telling you to buy the full chapter at the bottom of the page.  Click it.',
                '- Enter in user information...',
                '- Use credit card number 4242424242424242 and cvc number 123 to test.',
                '- Hopefully it worked without much hoopla!',
                '- Go to admin/config/services/ebookstripe/reports for a simple report of your successful sales in Drupal',
                '- Visit https://stripe.com/, sign in, go to your reports, and you should see your credit card transaction show up.',
                '- Open the webpage admin/config/services/ebookstripe and enter your LIVE Stripe details, check the live? box and click save',
                '- Repeat the above steps with your live account info from Stripe (and small amounts of money to test).',
                '- You are now open for business!',
                '- Drupal does not receive or save any transaction info besides the customer name, email, and what chapter they bought!',
                '- This is a basic starter kit with which you can alter to your liking',
                '',
                'Uninstalling',
                '- Uninstalling this module removes all of your products and customer database info from Drupal!  Not from Stripe.com, however.',
                '',
                'Security',
                '- You should probably get your website hosting company to install SSL on your server for customer trust/confidence.  It may not be demanded, though.  For more information, please read https://stripe.com/help/ssl .',
                '',
                'To Do:',
                '- better reporting page.  Keep in mind, this will not save anything about the credit cards to be PCI-compliant.',
                '- more configuration.'
            ),
            '#title' => 'How to use:',
            '#theme' => 'item_list'
        )
    );
    
    return $build;
}


function ebookstripe_startreading()
{
    $query    = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')->propertyCondition('status', 1)->entityCondition('bundle', 'ebookstripe_cover')->execute();
    if ($entities) {
        $nodes = entity_load('node', array_keys($entities['node']));
        return node_view_multiple($nodes, 'full');
    } else {
        return drupal_set_message("No e-books have been created yet");
    }
}


function ebookstripe_start_over($form, $form_state)
{
    $form                          = array();
    $form['ebookstripe_startover'] = array(
        '#type' => 'markup',
        '#title' => t('Remove a book?'),
        '#markup' => '<p>Press one of the links below to delete that book.</p>'
    );
    
    $listofbooks = variable_get('ebookstripe_number_chapters');
    $listofbooks = str_replace("-", '', $listofbooks);
    $listofbooks = str_replace(range(0, 9), '', $listofbooks);
    $listofbooks = explode(" ", $listofbooks);
    
    $thehtml = "<p>";
    foreach ($listofbooks as $book) {
        $thehtml = $thehtml . "<a href='delete/$book'>" . $book . "</a><br />";
    }
    $thehtml = $thehtml . "</p>";
    
    $form['ebookstripe_deletelinks'] = array(
        '#type' => 'markup',
        '#title' => t('Choose'),
        '#markup' => $thehtml
    );
    
    return $form;
}

function ebookstripe_delete_chapter()
{
    $whichbook   = arg(1);
    $listofbooks = variable_get('ebookstripe_number_chapters');
    $listofbooks = explode(" ", $listofbooks);
    foreach ($listofbooks as $book) {
        
        if (strpos($book, $whichbook) !== false) {
            $key = array_search("$book", $listofbooks);
            if ($key !== false) {
                unset($listofbooks[$key]);
                $string = implode(" ", $listofbooks);
                variable_set('ebookstripe_number_chapters', $string);
            }
            
            $listofbooks2 = explode("-", $book);
            $numchapters  = $listofbooks2[1];
            
            for ($x = 0; $x <= $numchapters; $x++) {
                $rolename = $whichbook . "_chapter" . $x;
                user_role_delete($rolename);
                
                $term = taxonomy_get_term_by_name($rolename);
                if (isset($term)) {
                    $termid   = key($term);
                    $query    = new EntityFieldQuery();
                    $entities = $query->entityCondition('entity_type', 'node')->propertyCondition('status', 1)->fieldCondition('field_ebookstripe_chapter', 'tid', "$termid")->execute();
                    $nids     = array_keys($entities['node']);
                    node_delete_multiple($nids);
                }
                
                $term = taxonomy_get_term_by_name($rolename);
                if ($term) {
                    foreach (array_keys($term) as $tid) {
                        taxonomy_term_delete($tid);
                    }
                }
            }
        }
    }
    field_purge_batch(1000);
    drupal_flush_all_caches();
    drupal_set_message("You deleted the book.  Time to make a new one!  One at a time for now please.");
    drupal_goto();
}


/**
 * First page of a multi-page form.
 * This page provides billing fields.
 *
 * @param array $form
 *   Define form elements.
 *
 * @param array $form_state
 *   State of current forms including passed values.
 *
 * @return array
 */
function ebookstripe_create_form($form, $form_state)
{
    
    // Return payment section of form if page_num == 2.
    if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
        return ebookstripe_form_payment($form, $form_state);
    }
    
    // Set page_num to 1 and build page 1.
    $form_state['page_num'] = 1;
    $form                   = array();
    // Define form as hierarchy so we can access both pages as trees.
    $form['#tree']          = TRUE;
    
    
    $form['billing'] = array(
        '#type' => 'fieldset',
        '#title' => t('Billing & Account Details - Enter your account for this site, or this will create one for you.'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE
    );
    
    // Check for $form_state values returned on form rebuild and when submitting the back button.
    global $user;
    if ($user->uid == 0) {
        $email                    = isset($form_state['values']['billing']['email']) ? $form_state['values']['billing']['email'] : '';
        $form['billing']['email'] = array(
            '#type' => 'textfield',
            '#title' => t('Email'),
            '#required' => TRUE,
            '#default_value' => $email,
            
            // Perform ajax validation.
            '#ajax' => array(
                'callback' => '_ebookstripe_form_email_ajax_validate',
                'wrapper' => 'email-error',
                'effect' => 'slide'
            ),
            '#suffix' => '<div id="email-error" style="color:#ff0000;"> </div>'
        );
        
        $form['billing']['password'] = array(
            '#type' => 'password',
            '#title' => t('Password'),
            '#required' => TRUE
        );
        
        $form['billing']['conf-password'] = array(
            '#type' => 'password',
            '#title' => t('Confirm Password'),
            '#required' => TRUE
        );
    } else {
        $email                    = $user->mail;
        $form['billing']['email'] = array(
            '#type' => 'textfield',
            '#title' => t('Email'),
            '#required' => TRUE,
            '#default_value' => $email,
            
            // Perform ajax validation.
            '#ajax' => array(
                'callback' => '_ebookstripe_form_email_ajax_validate',
                'wrapper' => 'email-error',
                'effect' => 'slide'
            ),
            '#suffix' => '<div id="email-error" style="color:#ff0000;"> </div>'
        );
    }
    
    
    $form['billing']['product'] = array(
        '#type' => 'hidden',
        '#title' => t('product'),
        '#required' => TRUE,
        '#default_value' => arg(2)
    );
    
    $testvariable = variable_get('ebookstripe_firstname');
    if ($testvariable > 0) {
        $firstname                    = isset($form_state['values']['billing']['firstname']) ? $form_state['values']['billing']['firstname'] : '';
        $form['billing']['firstname'] = array(
            '#type' => 'textfield',
            '#title' => t('First Name'),
            '#required' => TRUE,
            '#default_value' => $firstname
        );
    }
    
    $testvariable = variable_get('ebookstripe_lastname');
    if ($testvariable > 0) {
        $lastname                    = isset($form_state['values']['billing']['lastname']) ? $form_state['values']['billing']['lastname'] : '';
        $form['billing']['lastname'] = array(
            '#type' => 'textfield',
            '#title' => t('Last Name'),
            '#required' => TRUE,
            '#default_value' => $lastname
        );
    }
    
    $testvariable = variable_get('ebookstripe_phone');
    if ($testvariable > 0) {
        $phone                    = isset($form_state['values']['billing']['phone']) ? $form_state['values']['billing']['phone'] : '';
        $form['billing']['phone'] = array(
            '#type' => 'textfield',
            '#title' => t('Phone'),
            '#required' => TRUE,
            '#default_value' => $phone
        );
    }
    
    $testvariable = variable_get('ebookstripe_address');
    if ($testvariable > 0) {
        $address                    = isset($form_state['values']['billing']['address']) ? $form_state['values']['billing']['address'] : '';
        $form['billing']['address'] = array(
            '#type' => 'textfield',
            '#title' => t('Address Line 1'),
            '#required' => TRUE,
            '#default_value' => $address
        );
    }
    
    $testvariable = variable_get('ebookstripe_address2');
    if ($testvariable > 0) {
        $address2                    = isset($form_state['values']['billing']['address2']) ? $form_state['values']['billing']['address2'] : '';
        $form['billing']['address2'] = array(
            '#type' => 'textfield',
            '#title' => t('Address Line 2'),
            '#default_value' => $address2
        );
    }
    
    $testvariable = variable_get('ebookstripe_city');
    if ($testvariable > 0) {
        $city                    = isset($form_state['values']['billing']['city']) ? $form_state['values']['billing']['city'] : '';
        $form['billing']['city'] = array(
            '#type' => 'textfield',
            '#title' => t('City'),
            '#required' => TRUE,
            '#default_value' => $city
        );
    }
    
    $testvariable = variable_get('ebookstripe_county');
    if ($testvariable > 0) {
        $county                    = isset($form_state['values']['billing']['county']) ? $form_state['values']['billing']['county'] : '';
        $form['billing']['county'] = array(
            '#type' => 'textfield',
            '#title' => t('County'),
            '#required' => TRUE,
            '#default_value' => $county
        );
    }
    
    $testvariable = variable_get('ebookstripe_state');
    if ($testvariable > 0) {
        $state                    = isset($form_state['values']['billing']['state']) ? $form_state['values']['billing']['state'] : '';
        $form['billing']['state'] = array(
            '#type' => 'textfield',
            '#title' => t('State'),
            '#required' => TRUE,
            '#default_value' => $state
        );
    }
    
    $testvariable = variable_get('ebookstripe_zip');
    if ($testvariable > 0) {
        $zip                    = isset($form_state['values']['billing']['zip']) ? $form_state['values']['billing']['zip'] : '';
        $form['billing']['zip'] = array(
            '#type' => 'textfield',
            '#title' => t('Zip'),
            '#required' => TRUE,
            '#size' => 10,
            '#maxlength' => 10,
            '#default_value' => $zip
        );
    }
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Next',
        '#submit' => array(
            'ebookstripe_form_tracker'
        ),
        '#validate' => array(
            'ebookstripe_form_billing_validate'
        )
    );
    return $form;
}

/**
 * Track what page the form is on and rebuild form.
 *
 * @param array $form
 *   Elements to make up the form.
 *
 * @param array $form_state
 *   Form element value state of current form.
 */
function ebookstripe_form_tracker($form, &$form_state)
{
    $form_state['page_values'][1] = $form_state['values'];
    
    if (!empty($form_state['page_values'][2])) {
        $form_state['values'] = $form_state['page_values'][2];
    }
    
    // Define page number on form rebuild.
    $form_state['page_num'] = 2;
    $form_state['rebuild']  = TRUE;
}

/**
 * Set page_num to 1 and rebuild form when back button is clicked.
 *
 * @param array $form
 *   Form elements to build the form.
 *
 * @param array $form_state
 *   Form state elements to pass values.
 */
function ebookstripe_form_back($form, &$form_state)
{
    $form_state['values']   = $form_state['page_values'][1];
    $form_state['page_num'] = 1;
    $form_state['rebuild']  = TRUE;
}

/**
 * Provide page two of form to collect payment information and process with ebookstripe.
 *
 * @param array $form
 *   Form elements to build the form.
 *
 * @param array $form_state
 *   Form state elements to pass values.
 *
 * @return array
 *   return form and form_state arrays.
 */
function ebookstripe_form_payment($form, $form_state)
{
    drupal_add_js('https://js.stripe.com/v1/', 'external');
    drupal_add_js(drupal_get_path('module', 'ebookstripe') . '/js/ebookstripe.js');
    
    $form['payment'] = array(
        '#type' => 'fieldset',
        '#title' => t('Payment Details'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE
    );
    
    $form['payment']['instructions'] = array(
        '#type' => 'markup',
        '#title' => t('Demo information'),
        '#markup' => '<p>Please use the demo credit card # of 4242424242424242 and CVC # of 123 to fake buy this.</p>'
    );
    
    $form['payment']['stripetoken'] = array(
        '#type' => 'hidden',
        '#title' => t('stripetoken')
    );
    
    $form['payment']['card'] = array(
        '#type' => 'textfield',
        '#title' => t('Card'),
        '#size' => 20,
        '#maxlength' => 16,
        '#description' => t('Enter your card number'),
        '#attributes' => array(
            'class' => array(
                'card-number'
            ),
            'data-encrypted-name' => 'number',
            'autocomplete' => 'off'
        )
        // '#required' => TRUE,
    );
    $form['payment']['cvc']  = array(
        '#type' => 'textfield',
        '#title' => t('CVC'),
        '#size' => 3,
        '#maxlength' => 3,
        '#description' => t('Enter the CVC number printed on the back of your card.'),
        '#attributes' => array(
            'class' => array(
                'card-cvc'
            ),
            'data-encrypted-name' => 'cvv',
            'autocomplete' => 'off'
        )
        //'#required' => TRUE,
    );
    
    $month_range              = range('01', '12');
    $month_options            = array_combine($month_range, $month_range);
    $form['payment']['month'] = array(
        '#type' => 'select',
        '#title' => t('Month'),
        '#options' => $month_options,
        '#attributes' => array(
            'class' => array(
                'card-expire-month'
            )
        )
    );
    
    $year_range              = range(date('Y'), date('Y') + 5);
    $year_options            = array_combine($year_range, $year_range);
    $form['payment']['year'] = array(
        '#type' => 'select',
        '#title' => t('Year'),
        '#options' => $year_options,
        '#attributes' => array(
            'class' => array(
                'card-expire-year'
            )
        ),
        '#suffix' => '<span class="payment-errors" style="color:#ff0000;"> </span>'
    );
    
    $form['html'] = array(
        '#type' => 'markup',
        '#markup' => '<a href="https://stripe.com" target="_blank"><img src="https://stripe.com/img/about/logos/badge/styled.png" border="0"/></a><br>For more information, see the <a href="https://stripe.com">Security Docs</a><br />'
    );
    
    $one   = variable_get('ebookstripe_publishable_testkey');
    $two   = variable_get('ebookstripe_publishable_livekey');
    $three = variable_get('ebookstripe_gonelive');
    if ($three > 0) {
        $publishable_api_key = $two;
    } else {
        $publishable_api_key = $one;
    }
    
    $form['ebookstripe_publishable_key'] = array(
        '#type' => 'hidden',
        '#value' => $publishable_api_key,
        '#attributes' => array(
            'id' => array(
                'ebookstripe_publishable_key'
            )
        )
    );
    
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#submit' => array(
            'ebookstripe_form_callback'
        ),
        '#attributes' => array(
            'id' => array(
                'stripesubmit'
            )
        )
    );
    
    $form['back'] = array(
        '#type' => 'submit',
        '#value' => t('<< Back'),
        '#submit' => array(
            'ebookstripe_form_back'
        ),
        '#limit_validation_errors' => array()
    );
    
    
    $one   = variable_get('ebookstripe_publishable_testkey');
    $two   = variable_get('ebookstripe_publishable_livekey');
    $three = variable_get('ebookstripe_gonelive');
    if ($three > 0) {
        $ebookstripe_publishable_key = $two;
    } else {
        $ebookstripe_publishable_key = $one;
    }
    
    $one   = variable_get('ebookstripe_secret_testkey');
    $two   = variable_get('ebookstripe_secret_livekey');
    $three = variable_get('ebookstripe_gonelive');
    if ($three > 0) {
        $ebookstripe_secret_key = $two;
    } else {
        $ebookstripe_secret_key = $one;
    }
    return $form;
}

/**
 * Ajax validation on email and password.
 *
 * @param array $form
 *   Elements to build the form.
 *
 * @param array $form_state
 *   Values passed during form submission.
 *
 * @return string
 */
function _ebookstripe_form_email_ajax_validate($form, &$form_state)
{
    $email  = check_plain(filter_xss($form_state['values']['billing']['email']));
    $query  = 'SELECT name FROM {users} where mail = :mail';
    $result = db_query($query, array(
        ':mail' => $email
    ))->fetchField();
    
    if (!empty($result)) {
        $error = '<div id="email-error" style="color:#ff0000;">User is already registered.</div>';
        return $error;
    }
    
    // Validate as a true email format.`
    elseif (filter_var($form_state['values']['billing']['email'], FILTER_VALIDATE_EMAIL) == FALSE) {
        $error = '<div id="email-error" style="color:#ff0000;">The email is not valid.</div>';
        return $error;
    } else {
        $noerror = '<div id="email-error"> </div>';
        return $noerror;
    }
}



/**
 * This is a validation form that checks if the user is already signed up.
 */
function ebookstripe_check_customer($email, $password)
{
    $email    = check_plain(filter_xss($email));
    $password = check_plain(filter_xss($password));
    $query    = 'SELECT name FROM {users} where mail = :mail';
    $result   = db_query($query, array(
        ':mail' => $email
    ))->fetchField();
    
    // If no errors and the drupal account was not found create a new user.
    if (empty($result)) {
        // Create User
        $array                 = explode("@", $email);
        $customername          = $array[0];
        $user_info             = array();
        $user_info['name']     = $customername;
        $user_info['pass']     = $password;
        $user_info['mail']     = $email;
        $user_info['status']   = 1; // Set status to active.
        $user_info['access']   = 0;
        $user_info['login']    = 0;
        $user_info['timezone'] = variable_get('date_default_timezone', '');
        $user_info['data']     = FALSE;
        
        user_save(NULL, $user_info);
        $user_obj          = user_load_by_name($customername);
        $form_state        = array();
        $form_state['uid'] = $user_obj->uid;
        user_login_submit(array(), $form_state);
        // user_login_finalize();      
    }
    return $result;
}

/**
 * Validate billing section of form (page 1).
 *
 * @param array $form
 *   Elements to build the form.
 *
 * @param array $form_state
 *   Values passes during form submission.
 */
function ebookstripe_form_billing_validate($form, $form_state)
{
    // Validate as a true email format.
    if (filter_var($form_state['values']['billing']['email'], FILTER_VALIDATE_EMAIL) == FALSE) {
        form_set_error('billing][email', t('This email is not valid.'));
    }
    $email  = check_plain(filter_xss($form_state['values']['billing']['email']));
    $query  = 'SELECT name FROM {users} where mail = :mail';
    $result = db_query($query, array(
        ':mail' => $email
    ))->fetchField();
    
    global $user;
    if ($user->uid == 0) {
        if ($form_state['values']['billing']['password'] != $form_state['values']['billing']['conf-password']) {
            form_set_error('billing][conf-password', t('The passwords did not match.'));
        }
        if (!empty($result)) {
            drupal_set_message("The user email is already registered.  Please login to continue.");
            drupal_goto("user/login");
        }
    }
    
    if (stristr($form_state['values']['billing']['product'], "chapter")) {
        //product comes from hidden form element from previous url.  Need to make sure this is a valid url.
    } else {
        form_set_error('billing][product', t('Invalid product to purchase'));
    }
}

/**
 * Process ebookstripe Charge and save user data.
 *
 * @param array $form
 * @param array $form_state
 */
function ebookstripe_form_callback($form, $form_state)
{
    // Require ebookstripe Library.
    // NOTE: Transition this to using the Library 2.0 API
    require_once("lib/stripe-php/lib/Stripe.php");
    
    $one   = variable_get('ebookstripe_secret_testkey');
    $two   = variable_get('ebookstripe_secret_livekey');
    $three = variable_get('ebookstripe_gonelive');
    if ($three > 0) {
        $ebookstripe_secret_key = $two;
    } else {
        $ebookstripe_secret_key = $one;
    }
    
    empty($ebookstripe_secret_key) ? NULL : Stripe::setApiKey($ebookstripe_secret_key);
    // Assign billing data for easier referencing.
    $billing_values = $form_state['page_values']['1'];
    $price          = variable_get('ebookstripe_price') * 100;
    
    global $user;
    if ($user->uid == 0) {
        $customer_id = ebookstripe_check_customer($billing_values['billing']['email'], $billing_values['billing']['password']);
    }
    
    try {
        // Create a customer as referenced here https://stripe.com/docs/tutorials/charges.
        $customer = Stripe_Customer::create(array(
            "card" => $form_state['values']['stripetoken'],
            // "card" => $billing_values['payment']['stripetoken'],
            "description" => $billing_values['billing']['email']
        ));
        
        // Charge the customer.
        $charge = Stripe_Charge::create(array(
            "amount" => $price,
            "currency" => "usd",
            "customer" => $customer->id
        ));
    }
    
    catch (Stripe_CardError $e) {
        //Card is declined.
        $jbody = $e->getJsonBody();
        $err   = $jbody['error'];
        watchdog('strip_card_error', 'Card error Type: @type, Code: @code, Message: @message', array(
            '@type' => $err['type'],
            '@code' => $err['code'],
            '@message' => $err['message']
        ));
        drupal_set_message($err['message']);
        drupal_set_message("card is declined");
        return;
    }
    catch (Stripe_InvalidRequestError $e) {
    //Invalid request error.
        $jbody = $e->getJsonBody();
        $err   = $jbody['error'];
        watchdog('strip_card_request_error', 'Invalid Request Param: @param, Message: @message', array(
            
            //      '@param' => $err['param'],
            '@message' => $err['message']
        ));
        drupal_set_message($err['message']);
        drupal_set_message("Invalid request error");
        return;
    }
    catch (Stripe_AuthenticationError $e) {
    //Invalid Key request error.
        $jbody = $e->getJsonBody();
        $err   = $jbody['error'];
        watchdog('stripe_invalid_key', 'Key error Type: @type, Message: @message', array(
            '@type' => $err['type'],
            '@message' => $err['message']
        ));
        drupal_set_message($err['message']);
        drupal_set_message("Invalid Key request error with authentication.");
        return;
    }
    catch (Stripe_Error $e) {
    // General Error.
        $jbody = $e->getJsonBody();
        $err   = $jbody['error'];
        watchdog('stripe_general_error', 'Message: @message', array(
            '@message' => $err['message']
        ));
        drupal_set_message(t('A error occured, contact the site administrator.'));
        return;
    }
    catch (Exception $e) {
        watchdog('error', 'Message: @message', array(
            '@message' => $err['message']
        ));
        drupal_set_message(t('A error occured, contact the site administrator.'));
        return;
    }
    
    $nid = db_insert('ebookstripe_customers')->fields(array(
        'timestamp' => REQUEST_TIME,
        'contactname' => $customer->id,
        'contactemail' => $billing_values['billing']['email'],
        'booktype' => arg(4)
    ))->execute();
    
    global $user;
    $uid       = $user->uid; // User ID of user that you want to add role to.
    $role_name = arg(4); // The name of the role to add.
    if ($role = user_role_load_by_name($role_name)) {
        user_multiple_role_edit(array(
            $uid
        ), 'add_role', $role->rid);
    }
    
    $testvariable = variable_get('ebookstripe_sendemail');
    if ($testvariable > 0) {
        $module = 'ebookstripe';
        $key    = 'key';
        $to     = $billing_values['billing']['email'];
        
        $language                 = language_default();
        $params                   = array();
        $from                     = NULL;
        $send                     = FALSE;
        $message                  = drupal_mail($module, $key, $to, $language, $params, $from, $send);
        $sitename                 = variable_get('site_name', '');
        $siteadmin                = variable_get('site_mail', '');
        $subject                  = 'Receipt for order from ' . $sitename;
        $message['headers']['CC'] = $siteadmin;
        $message['subject']       = $subject;
        $message['body']          = array();
        $message['body'][]        = $to . ", login to " . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] . " to see your order for $" . variable_get('ebookstripe_price') . " on " . date('l jS \of F Y h:i:s A');
        
        // Retrieve the responsible implementation for this message.
        $system = drupal_mail_system($module, $key);
        
        // Format the message body.
        $message = $system->format($message);
        
        // Send e-mail.
        $message['result'] = $system->mail($message);
        
        if ($message['result'] == TRUE) {
            drupal_set_message(t('Your receipt has been sent. Thank you!'));
        } else {
            drupal_set_message(t('There was a problem sending your receipt and it was not sent.'), 'error');
        }
    }
    drupal_goto();
}


function ebookstripe_load_chapter()
{
    if (arg(0) == "book" && !is_numeric(arg(1)) && arg(2) == "chapter" && is_numeric(arg(3))) {
        $theterm = arg(1) . "_" . arg(2) . arg(3);
        $term    = taxonomy_get_term_by_name($theterm);
        if (isset($term)) {
            
            global $user;
            if (in_array($theterm, $user->roles)) {
                $termid   = key($term);
                $query    = new EntityFieldQuery();
                $entities = $query->entityCondition('entity_type', 'node')->propertyCondition('status', 1)->fieldCondition('field_ebookstripe_chapter', 'tid', "$termid")->execute();
                $nodes    = entity_load('node', array_keys($entities['node']));
                return node_view_multiple($nodes, 'full');
            } else {
                $termid   = key($term);
                $query    = new EntityFieldQuery();
                $entities = $query->entityCondition('entity_type', 'node')->propertyCondition('status', 1)
                
                    ->fieldCondition('field_ebookstripe_chapter', 'tid', "$termid")->execute();
                $nodes    = entity_load('node', array_keys($entities['node']));
                return node_view_multiple($nodes, 'teaser');
            }
        }
    } else {
        return drupal_set_message("This is not a valid chapter for this book");
    }
}